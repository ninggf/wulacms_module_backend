layui.define(['jquery'], function (exports) {
  'use strict';

  var $ = layui.$;
  var app = new Vue({
    el: '#install',
    data: {
      // 环境监测 
      step: [{
        title: '环境检测',
        name: 'home'
      }, {
        title: '安全码验证',
        name: 'verify'
      }, {
        title: '环境选择',
        name: 'config'
      }, {
        title: '数据库配置',
        name: 'db'
      }, {
        title: '创建管理员',
        name: 'user'
      }, {
        title: '安装',
        name: 'install'
      }],
      requirements: window.vueData.requirements,
      dirs: window.vueData.dirs,
      page_step: window.vueData.step,
      page_data: window.vueData.data,
      status: 0,
      //0提交验证 1验证中 //2验证通过//3禁止
      current: 'home',
      install_progress: 0,
      tips: "",
      progress: {
        percent: 0,
        list: []
      },
      verify: {
        code: ''
      },
      config: {
        config: 'pro'
      },
      db: {
        type: 'MYSQL',
        dbname: '',
        dbusername: '',
        dbpwd: '',
        host: '',
        port: '',
        prefix: '',
        persistent: 0
      },
      user: {
        name: '',
        pwd: '',
        confirm_pwd: '',
        url: 'backend'
      },
      url1: '',
      url2: ''
    },
    methods: {
      verifyNext: function verifyNext() {
        var flag = 1;
        this.requirements.map(function (v) {
          if (!(v[1].pass | v[1].optional)) flag = 0;
        });
        this.dirs.map(function (v) {
          if (!(v[1].pass | v[1].optional)) flag = 0;
        });
        return flag;
      },
      go: function go(type) {
        if (!type) return;
        var $vm = this;
        $vm.tips = '';
        $vm.status = 0;
        $("input").removeClass("tips");

        for (var i = 0; i < $vm.step.length; i++) {
          if ($vm.step[i].name == $vm.current) {
            $vm.current = type == 'next' ? $vm.step[i + 1].name : $vm.step[i - 1].name;

            if ($vm.current == 'install') {
              $vm.doInstall();
            }

            return;
          }
        }
      },
      removeTips: function removeTips(name) {
        $("input." + name).removeClass("tips");
      },
      setup: function setup(name) {
        var $vm = this,
            api = "installer/setup",
            tips_arr = [];
        this.status = 1; // 本地检查input填写

        if (name == "db" || name == "user") {
          for (var i in $vm[name]) {
            if (!$vm[name][i] && i != "port" && i != "host" && i != "persistent") {
              tips_arr.push('input.' + i);
            }
          }

          while (tips_arr.length) {
            $(tips_arr.shift()).addClass('tips');

            if (tips_arr.length == 0) {
              $vm.status = 0;
              return;
            }
          }
        }

        if (name == 'verify') {
          api = 'installer/verify';
        }

        $.post(api, api == "installer/setup" ? {
          step: name,
          cfg: $vm[name]
        } : {
          step: name,
          code: $vm.verify.code
        }, function (data) {
          if (data && data.status) {
            $vm.status = 1;
            $vm.go('next');
          } else {
            $vm.current = data.step;
            $vm.tips = data.msg || 'tips';
            $vm.status = 0;
          }
        });
      },
      doInstall: function doInstall() {
        var $vm = this,
            response_len = false,
            data = null;
        $.get({
          url: 'installer/install',
          timeout: 3000000,
          dataType: 'text',
          xhrFields: {
            onprogress: function onprogress(e) {
              var response,
                  resp = e.currentTarget.response;

              if (response_len === false) {
                response = resp;
                response_len = resp.length;
              } else {
                response = resp.substring(response_len);
                response_len = resp.length;
              }

              var responses = response.replace(/\}\{/g, '}]-[{').split(']-[');
              responses.forEach(function (res) {
                $vm.installLog(res, $vm);
              });
            }
          }
        }, function (data) {
          $vm.url1 = $vm.progress.list[$vm.progress.list.length - 1]['url'][0];
          $vm.url2 = $vm.progress.list[$vm.progress.list.length - 1]['url'][1];
          console.log('install is done');
        });
      },
      installLog: function installLog(response, $vm) {
        var data = JSON.parse(response);
        var flag = 0;

        if (data.status == 0) {
          $vm.install_progress = -1;
        }

        if ($vm.progress.list.length) {
          for (var i = 0; i < $vm.progress.list.length; i++) {
            var item = $vm.progress.list[i];

            if (data && item.step == data.step && data.done == 1) {
              $vm.progress.list.splice(i, 1, data);
              flag = 1;
            }
          }

          if (!flag) {
            $vm.progress.list.push(data);
          }

          $vm.install_progress = $vm.progress.list[$vm.progress.list.length - 1].percent;
          layui.element.progress('install-progress', $vm.install_progress + '%');
        } else {
          $vm.progress.list.push(data);
        }
      }
    },
    mounted: function mounted() {
      if (this.page_step) {
        for (var i in this.page_data) {
          if (this.page_data[i] && this[i]) this[i] = this.page_data[i];
        }

        this.current = this.page_step;
      }
    },
    watch: {
      'db.prefix': {
        handler: function handler(newVal, oldVal) {
          this.db.prefix = this.db.prefix.replace(/[^A-Za-z]/g, '');
        }
      }
    }
  });
  exports('@backend.install', app);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
